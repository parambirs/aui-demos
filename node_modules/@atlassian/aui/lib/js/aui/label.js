(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', 'module', './internal/skate', 'skatejs-template-html', './internal/enforcer', './internal/constants'], factory);
    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
        factory(exports, module, require('./internal/skate'), require('skatejs-template-html'), require('./internal/enforcer'), require('./internal/constants'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, mod, global.skate, global.skateTemplateHtml, global.enforce, global.constants);
        global.label = mod.exports;
    }
})(this, function (exports, module, _internalSkate, _skatejsTemplateHtml, _internalEnforcer, _internalConstants) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _skate = _interopRequireDefault(_internalSkate);

    var _skateTemplateHtml = _interopRequireDefault(_skatejsTemplateHtml);

    var _enforce = _interopRequireDefault(_internalEnforcer);

    function getLabel(element) {
        return element.querySelector('label');
    }

    function updateLabelFor(element, change) {
        if (element.hasAttribute('for')) {
            getLabel(element).setAttribute('for', '' + change.newValue + _internalConstants.INPUT_SUFFIX);
        } else {
            getLabel(element).removeAttribute('for');
        }
    }

    function updateLabelForm(element, change) {
        if (element.hasAttribute('form')) {
            getLabel(element).setAttribute('form', change.newValue);
        } else {
            getLabel(element).removeAttribute('form');
        }
    }

    var Label = (0, _skate['default'])('aui-label', {
        template: (0, _skateTemplateHtml['default'])('<label><content></content></label>'),
        created: function created(element) {
            element._label = getLabel(element); // required for quick access from test
        },
        attached: function attached(element) {
            (0, _enforce['default'])(element).attributeExists('for');
        },
        attributes: {
            'for': updateLabelFor,
            form: updateLabelForm
        },
        prototype: Object.defineProperties({}, {
            disabled: {
                get: function get() {
                    return this.hasAttribute('disabled');
                },
                set: function set(value) {
                    if (value) {
                        this.setAttribute('disabled', '');
                    } else {
                        this.removeAttribute('disabled');
                    }
                },
                configurable: true,
                enumerable: true
            }
        }),
        events: {
            click: function click(element, e) {
                if (element.disabled) {
                    e.preventDefault();
                }
            }
        }
    });

    module.exports = Label;
});
//# sourceMappingURL=../../js/aui/label.js.map