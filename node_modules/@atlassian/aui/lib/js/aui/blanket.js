(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', './jquery', './internal/deprecation', './internal/animation', './create-element', './internal/globalize'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports, require('./jquery'), require('./internal/deprecation'), require('./internal/animation'), require('./create-element'), require('./internal/globalize'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.$, global.deprecation, global.animation, global.createElement, global.globalize);
        global.blanket = mod.exports;
    }
})(this, function (exports, _jquery, _internalDeprecation, _internalAnimation, _createElement, _internalGlobalize) {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
        value: true
    });

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _$ = _interopRequireDefault(_jquery);

    var _createElement2 = _interopRequireDefault(_createElement);

    var _globalize = _interopRequireDefault(_internalGlobalize);

    var $overflowEl;
    var _hiddenByAui = [];

    /**
     * Dims the screen using a blanket div
     * @param useShim deprecated, it is calculated by dim() now
     */
    function dim(useShim, zIndex) {

        //if we're blanketing the page it means we want to hide the whatever is under the blanket from the screen readers as well
        function hasAriaHidden(element) {
            return element.getAttribute('aria-hidden') ? true : false;
        }

        function isAuiLayer(element) {
            return element.className.match(/\baui-layer\b/) ? true : false;
        }

        _hiddenByAui = [];
        Array.prototype.forEach.call(document.body.children, function (element) {
            if (!hasAriaHidden(element) && !isAuiLayer(element)) {
                element.setAttribute('aria-hidden', 'true');
                _hiddenByAui.push(element);
            }
        });

        if (!$overflowEl) {
            $overflowEl = (0, _$['default'])(document.body);
        }

        if (useShim === true) {
            useShimDeprecationLogger();
        }

        var isBlanketShowing = !!dim.$dim && dim.$dim.attr('aria-hidden') === 'false';

        if (!!dim.$dim) {
            dim.$dim.remove();
            dim.$dim = null;
        }

        dim.$dim = (0, _createElement2['default'])('div').addClass('aui-blanket');
        dim.$dim.attr('tabindex', '0'); //required, or the last element's focusout event will go to the browser
        dim.$dim.appendTo(document.body);

        if (!isBlanketShowing) {
            //recompute after insertion and before setting aria-hidden=false to ensure we calculate a difference in
            //computed styles
            (0, _internalAnimation.recomputeStyle)(dim.$dim);
            dim.cachedOverflow = $overflowEl.css('overflow');
            $overflowEl.css('overflow', 'hidden');
        }

        dim.$dim.attr('aria-hidden', 'false');

        if (zIndex) {
            dim.$dim.css({ zIndex: zIndex });
        }

        return dim.$dim;
    }

    /**
     * Removes semitransparent DIV
     * @see dim
     */
    function undim() {
        _hiddenByAui.forEach(function (element) {
            element.removeAttribute('aria-hidden');
        });

        if (dim.$dim) {
            dim.$dim.attr('aria-hidden', 'true');

            $overflowEl && $overflowEl.css('overflow', dim.cachedOverflow);
        }
    }

    var useShimDeprecationLogger = (0, _internalDeprecation.getMessageLogger)('useShim', {
        extraInfo: 'useShim has no alternative as it is now calculated by dim().'
    });

    (0, _globalize['default'])('dim', dim);
    (0, _globalize['default'])('undim', undim);

    exports.dim = dim;
    exports.undim = undim;
});
//# sourceMappingURL=../../js/aui/blanket.js.map