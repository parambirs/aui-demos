(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', './jquery', './internal/log', './internal/globalize'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports, require('./jquery'), require('./internal/log'), require('./internal/globalize'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.$, global.logger, global.globalize);
        global.event = mod.exports;
    }
})(this, function (exports, _jquery, _internalLog, _internalGlobalize) {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
        value: true
    });

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _$ = _interopRequireDefault(_jquery);

    var _globalize = _interopRequireDefault(_internalGlobalize);

    /**
     * Binds events to the window object. See jQuery bind documentation for more
     * details. Exceptions are caught and logged.
     */
    function bind(eventType, eventData, handler) {
        try {
            if (typeof handler === 'function') {
                return (0, _$['default'])(window).bind(eventType, eventData, handler);
            } else {
                return (0, _$['default'])(window).bind(eventType, eventData);
            }
        } catch (e) {
            _internalLog.log('error while binding: ' + e.message);
        }
    }

    /**
     * Unbinds event handlers from the window object. See jQuery unbind
     * documentation for more details. Exceptions are caught and logged.
     */
    function unbind(eventType, handler) {
        try {
            return (0, _$['default'])(window).unbind(eventType, handler);
        } catch (e) {
            _internalLog.log('error while unbinding: ' + e.message);
        }
    }

    /**
     * Triggers events on the window object. See jQuery trigger documentation for
     * more details. Exceptions are caught and logged.
     */
    function trigger(eventType, extraParameters) {
        try {
            return (0, _$['default'])(window).trigger(eventType, extraParameters);
        } catch (e) {
            _internalLog.log('error while triggering: ' + e.message);
        }
    }

    (0, _globalize['default'])('bind', bind);
    (0, _globalize['default'])('trigger', trigger);
    (0, _globalize['default'])('unbind', unbind);

    exports.bind = bind;
    exports.unbind = unbind;
    exports.trigger = trigger;
});
//# sourceMappingURL=../../js/aui/event.js.map