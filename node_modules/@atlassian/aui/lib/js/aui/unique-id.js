(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', 'module', './internal/globalize'], factory);
    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
        factory(exports, module, require('./internal/globalize'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, mod, global.globalize);
        global.uniqueId = mod.exports;
    }
})(this, function (exports, module, _internalGlobalize) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _globalize = _interopRequireDefault(_internalGlobalize);

    var uniqueID;
    var uniqueIDstring;
    var uniqueIDcounter = 0;

    /**
     * Generate a unique ID string, checking the ID is not present in the DOM before
     * returning. Note uniqueID, uniqueIDstring, uniqueIDcounter = 0; set at top of
     * file.
     *
     * @param {String} prefix String to prepend to ID instead of default AUI prefix.
     *
     * @returns {String}
     */
    function generateUniqueId(prefix) {
        uniqueID = uniqueIDcounter++ + '';
        uniqueIDstring = prefix ? prefix + uniqueID : 'aui-uid-' + uniqueID;

        if (!document.getElementById(uniqueIDstring)) {
            return uniqueIDstring;
        } else {
            uniqueIDstring = uniqueIDstring + '-' + new Date().getTime();

            if (!document.getElementById(uniqueIDstring)) {
                return uniqueIDstring;
            } else {
                throw new Error('Timestamped fallback ID "' + uniqueIDstring + '" exists.');
            }
        }
    }

    (0, _globalize['default'])('id', generateUniqueId);

    module.exports = generateUniqueId;
});
//# sourceMappingURL=../../js/aui/unique-id.js.map