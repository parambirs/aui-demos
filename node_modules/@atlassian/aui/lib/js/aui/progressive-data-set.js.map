{"version":3,"sources":["js/aui/progressive-data-set.js"],"names":[],"mappings":"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","file":"js/aui/progressive-data-set.js","sourcesContent":["'use strict';\n\nimport _ from './underscore';\nimport Backbone from './backbone';\nimport globalize from './internal/globalize';\n\n/**\n * @fileOverview describes a ProgressiveDataSet object.\n *\n * This object serves as part of a series of components to handle the various aspects of autocomplete controls.\n */\nvar ProgressiveDataSet = Backbone.Collection.extend({\n    /**\n     * A queryable set of data that optimises the speed at which responses can be provided.\n     *\n     * ProgressiveDataSet should be given a matcher function so that it may filter results for queries locally.\n     *\n     * ProgressiveDataSet can be given a remote query endpoint to fetch data from. Should a remote endpoint\n     * be provided, ProgressiveDataSet will leverage both client-side matching and query caching to reduce\n     * the number of times the remote source need be queried.\n     *\n     * @example\n     * var source = new ProgressiveDataSet([], {\n     *     model: Backbone.Model.extend({ idAttribute: \"username\" }),\n     *     queryEndpoint: \"/jira/rest/latest/users\",\n     *     queryParamKey: \"username\",\n     *     matcher: function(model, query) {\n     *         return _.startsWith(model.get('username'), query);\n     *     }\n     * });\n     * source.on('respond', doStuffWithMatchingResults);\n     * source.query('john');\n     *\n     * @property {String} value the latest query for which the ProgressiveDataSet is responding to.\n     * @property {Number} activeQueryCount the number of queries being run remotely.\n     */\n    initialize: function (models, options) {\n        options || (options = {});\n        if (options.matcher) {\n            this.matcher = options.matcher;\n        }\n        if (options.model) {\n            this.model = options.model; // Fixed in backbone 0.9.2\n        }\n        this._idAttribute = (new this.model()).idAttribute;\n        this._maxResults = options.maxResults || 5;\n        this._queryData = options.queryData || {};\n        this._queryParamKey = options.queryParamKey || 'q';\n        this._queryEndpoint = options.queryEndpoint || '';\n        this.value = null;\n        this.queryCache = {};\n        this.activeQueryCount = 0;\n        _.bindAll(this, 'query', 'respond');\n    },\n\n    url: function () {\n        return this._queryEndpoint;\n    },\n\n    /**\n     * Sets and runs a query against the ProgressiveDataSet.\n     *\n     * Bind to ProgressiveDataSet's 'respond' event to receive the results that match the latest query.\n     *\n     * @param {String} query the query to run.\n     */\n    query: function (query) {\n        var remote, results;\n\n        this.value = query;\n        results = this.getFilteredResults(query);\n        this.respond(query, results);\n\n        if (!query || !this._queryEndpoint || this.hasQueryCache(query) || !this.shouldGetMoreResults(results)) {\n            return;\n        }\n\n        remote = this.fetch(query);\n\n        this.activeQueryCount++;\n        this.trigger('activity', {activity: true});\n        remote.always(_.bind(function () {\n            this.activeQueryCount--;\n            this.trigger('activity', {activity: !!this.activeQueryCount});\n        }, this));\n\n        remote.done(_.bind(function (resp, succ, xhr) {\n            this.addQueryCache(query, resp, xhr);\n        }, this));\n        remote.done(_.bind(function () {\n            query = this.value;\n            results = this.getFilteredResults(query);\n            this.respond(query, results);\n        }, this));\n    },\n\n    /**\n     * Gets all the data that should be sent in a remote request for data.\n     * @param {String} query the value of the query to be run.\n     * @return {Object} the data to to be sent to the remote when querying it.\n     * @private\n     */\n    getQueryData: function (query) {\n        var params = _.isFunction(this._queryData) ? this._queryData(query) : this._queryData;\n        var data = _.extend({}, params);\n        data[this._queryParamKey] = query;\n        return data;\n    },\n\n    /**\n     * Get data from a remote source that matches the query, and add it to this ProgressiveDataSet's set.\n     *\n     * @param {String} query the value of the query to be run.\n     * @return {jQuery.Deferred} a deferred object representing the remote request.\n     */\n    fetch: function (query) {\n        var data = this.getQueryData(query);\n        // {add: true} for Backbone <= 0.9.2\n        // {update: true, remove: false} for Backbone >= 0.9.9\n        var params = {add: true, update: true, remove: false, data: data};\n        var remote = Backbone.Collection.prototype.fetch.call(this, params);\n        return remote;\n    },\n\n    /**\n     * Triggers the 'respond' event on this ProgressiveDataSet for the given query and associated results.\n     *\n     * @param {String} query the query that was run\n     * @param {Array} results a set of results that matched the query.\n     * @return {Array} the results.\n     * @private\n     */\n    respond: function (query, results) {\n        this.trigger('respond', {\n            query: query,\n            results: results\n        });\n        return results;\n    },\n\n    /**\n     * A hook-point to define a function that tests whether a model matches a query or not.\n     *\n     * This will be called by getFilteredResults in order to generate the list of results for a query.\n     *\n     * (For you java folks, it's essentially a predicate.)\n     *\n     * @param {Backbone.Model} item a model of the data to check for a match in.\n     * @param {String} query the value to test against the item.\n     * @returns {Boolean} true if the model matches the query, otherwise false.\n     * @function\n     */\n    matcher: function (item, query) { },\n\n    /**\n     * Filters the set of data contained by the ProgressiveDataSet down to a smaller set of results.\n     *\n     * The set will only consist of Models that \"match\" the query -- i.e., only Models where\n     * a call to ProgressiveDataSet#matcher returns true.\n     *\n     * @param query {String} the value that results should match (according to the matcher function)\n     * @return {Array} A set of Backbone Models that match the query.\n     */\n    getFilteredResults: function (query) {\n        var results = [];\n        if (!query) {\n            return results;\n        }\n        results = this.filter(function (item) {\n            return !!this.matcher(item, query);\n        }, this);\n        if (this._maxResults) {\n            results = _.first(results, this._maxResults);\n        }\n        return results;\n    },\n\n    /**\n     * Store a response in the query cache for a given query.\n     *\n     * @param {String} query the value to cache a response for.\n     * @param {Object} response the data of the response from the server.\n     * @param {XMLHttpRequest} xhr\n     * @private\n     */\n    addQueryCache: function (query, response, xhr) {\n        var cache = this.queryCache;\n        var results = this.parse(response, xhr);\n        cache[query] = _.pluck(results, this._idAttribute);\n    },\n\n    /**\n     * Check if there is a query cache entry for a given query.\n     *\n     * @param query the value to check in the cache\n     * @return {Boolean} true if the cache contains a response for the query, false otherwise.\n     */\n    hasQueryCache: function (query) {\n        return this.queryCache.hasOwnProperty(query);\n    },\n\n    /**\n     * Get the query cache entry for a given query.\n     *\n     * @param query the value to check in the cache\n     * @return {Object[]} an array of values representing the IDs of the models the response for this query contained.\n     */\n    findQueryCache: function (query) {\n        return this.queryCache[query];\n    },\n\n    /**\n     *\n     * @param {Array} results the set of results we know about right now.\n     * @return {Boolean} true if the ProgressiveDataSet should look for more results.\n     * @private\n     */\n    shouldGetMoreResults: function (results) {\n        return results.length < this._maxResults;\n    },\n\n    /**\n     *\n     * @note Changing this value will trigger ProgressiveDataSet#event:respond if there is a query.\n     * @param {Number} number how many results should the ProgressiveDataSet aim to retrieve for a query.\n     */\n    setMaxResults: function (number) {\n        this._maxResults = number;\n        this.value && this.respond(this.value, this.getFilteredResults(this.value));\n    }\n});\n\nglobalize('ProgressiveDataSet', ProgressiveDataSet);\n\nexport default ProgressiveDataSet;\n"],"sourceRoot":"/source/"}