{"version":3,"sources":["js/aui/internal/attributes.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAIO,aAAS,mBAAmB,CAAC,SAAS,EAAE;AAC3C,eAAO,SAAS,KAAK,IAAI,CAAC;KAC7B;;AAEM,aAAS,mBAAmB,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;AACpD,YAAI,QAAQ,EAAE;AACV,cAAE,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;SAC7B,MAAM;AACH,cAAE,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;SAC5B;KACJ;;AAEM,aAAS,gBAAgB,CAAC,WAAW,EAAE,KAAK,EAAE;AACjD,YAAM,gBAAgB,GAAG,SAAnB,gBAAgB,CAAG,SAAS;mBAAI,SAAS,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,WAAW,EAAE;SAAA,CAAC;;AAEtF,YAAM,SAAS,GAAG,KAAK,KAAK,IAAI,CAAC;AACjC,YAAM,SAAS,GAAG,CAAC,SAAS,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC;;AAEpF,YAAI,SAAS,EAAE;AACX,gBAAI,WAAW,CAAC,cAAc,CAAC,gBAAgB,CAAC,EAAE;AAC9C,uBAAO,WAAW,CAAC,cAAc,CAAC;aACrC;AACD,mBAAO,IAAI,CAAC;SACf;;AAED,YAAI,SAAS,EAAE;AACX,gBAAI,WAAW,CAAC,cAAc,CAAC,gBAAgB,CAAC,EAAE;AAC9C,uBAAO,WAAW,CAAC,cAAc,CAAC;aACrC,MAAM,IAAI,WAAW,CAAC,cAAc,CAAC,gBAAgB,CAAC,EAAE;AACrD,uBAAO,WAAW,CAAC,cAAc,CAAC;aACrC;AACD,mBAAO,IAAI,CAAC;SACf;;AAED,eAAO,WAAW,CAAC,MAAM,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;KAC5F;;AAGM,aAAS,gBAAgB,CAAC,EAAE,EAAE,WAAW,EAAE,QAAQ,EAAE;AACxD,UAAE,CAAC,YAAY,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;KACpD;;;;;;;;;;yBAUc;AACX,2BAAmB,EAAnB,mBAAmB;AACnB,2BAAmB,EAAnB,mBAAmB;;AAEnB,wBAAgB,EAAhB,gBAAgB;AAChB,wBAAgB,EAAhB,gBAAgB;KACnB","file":"js/aui/internal/attributes.js","sourcesContent":["/**\n * Like el.hasAttribute(attr) but designed for use within a skate attribute\n * change handler where you only have access to change.oldValue.\n */\nexport function computeBooleanValue(attrValue) {\n    return attrValue !== null;\n}\n\nexport function setBooleanAttribute(el, attr, newValue) {\n    if (newValue) {\n        el.setAttribute(attr, '');\n    } else {\n        el.removeAttribute(attr);\n    }\n}\n\nexport function computeEnumValue(enumOptions, value) {\n    const matchesEnumValue = enumValue => enumValue.toLowerCase() === value.toLowerCase();\n\n    const isMissing = value === null;\n    const isInvalid = !isMissing && !enumOptions.values.filter(matchesEnumValue).length;\n\n    if (isMissing) {\n        if (enumOptions.hasOwnProperty('missingDefault')) {\n            return enumOptions.missingDefault;\n        }\n        return null;\n    }\n\n    if (isInvalid) {\n        if (enumOptions.hasOwnProperty('invalidDefault')) {\n            return enumOptions.invalidDefault;\n        } else if (enumOptions.hasOwnProperty('missingDefault')) {\n            return enumOptions.missingDefault;\n        }\n        return null;\n    }\n\n    return enumOptions.values.length ? enumOptions.values.filter(matchesEnumValue)[0] : null;\n}\n\n\nexport function setEnumAttribute(el, enumOptions, newValue) {\n    el.setAttribute(enumOptions.attribute, newValue);\n}\n\n/**\n * Helper functions useful for implementing reflected boolean and enumerated\n * attributes and properties.\n *\n * @see https://html.spec.whatwg.org/multipage/infrastructure.html#reflecting-content-attributes-in-idl-attributes\n * @see https://html.spec.whatwg.org/multipage/infrastructure.html#boolean-attribute\n * @see https://html.spec.whatwg.org/multipage/infrastructure.html#enumerated-attribute\n */\nexport default {\n    computeBooleanValue,\n    setBooleanAttribute,\n\n    computeEnumValue,\n    setEnumAttribute\n};\n"],"sourceRoot":"/source/"}