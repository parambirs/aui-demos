(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', 'module', './jquery', './internal/amdify', './internal/globalize', './layer', './internal/widget'], factory);
    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
        factory(exports, module, require('./jquery'), require('./internal/amdify'), require('./internal/globalize'), require('./layer'), require('./internal/widget'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, mod, global.$, global.amdify, global.globalize, global.layerWidget, global.widget);
        global.dialog2 = mod.exports;
    }
})(this, function (exports, module, _jquery, _internalAmdify, _internalGlobalize, _layer, _internalWidget) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _$ = _interopRequireDefault(_jquery);

    var _amdify = _interopRequireDefault(_internalAmdify);

    var _globalize = _interopRequireDefault(_internalGlobalize);

    var _layerWidget = _interopRequireDefault(_layer);

    var _widget = _interopRequireDefault(_internalWidget);

    var defaults = {
        'aui-focus': 'false', // do not focus by default as it's overridden below
        'aui-blanketed': 'true'
    };

    function applyDefaults($el) {
        _$['default'].each(defaults, function (key, value) {
            var dataKey = 'data-' + key;
            if (!$el[0].hasAttribute(dataKey)) {
                $el.attr(dataKey, value);
            }
        });
    }

    function Dialog2(selector) {
        if (selector) {
            this.$el = (0, _$['default'])(selector);
        } else {
            this.$el = (0, _$['default'])(aui.dialog.dialog2({}));
        }
        applyDefaults(this.$el);
    }

    Dialog2.prototype.on = function (event, fn) {
        (0, _layerWidget['default'])(this.$el).on(event, fn);
        return this;
    };

    Dialog2.prototype.off = function (event, fn) {
        (0, _layerWidget['default'])(this.$el).off(event, fn);
        return this;
    };

    Dialog2.prototype.show = function () {
        (0, _layerWidget['default'])(this.$el).show();
        return this;
    };

    Dialog2.prototype.hide = function () {
        (0, _layerWidget['default'])(this.$el).hide();
        return this;
    };

    Dialog2.prototype.remove = function () {
        (0, _layerWidget['default'])(this.$el).remove();
        return this;
    };

    Dialog2.prototype.isVisible = function () {
        return (0, _layerWidget['default'])(this.$el).isVisible();
    };

    var dialog2Widget = (0, _widget['default'])('dialog2', Dialog2);

    dialog2Widget.on = function (eventName, fn) {
        _layerWidget['default'].on(eventName, '.aui-dialog2', fn);
        return this;
    };

    dialog2Widget.off = function (eventName, fn) {
        _layerWidget['default'].off(eventName, '.aui-dialog2', fn);
        return this;
    };

    /* Live events */

    (0, _$['default'])(document).on('click', '.aui-dialog2-header-close', function (e) {
        e.preventDefault();
        dialog2Widget((0, _$['default'])(this).closest('.aui-dialog2')).hide();
    });

    dialog2Widget.on('show', function (e, $el) {
        var selectors = ['.aui-dialog2-content', '.aui-dialog2-footer', '.aui-dialog2-header'];
        var $selected;
        selectors.some(function (selector) {
            $selected = $el.find(selector + ' :aui-tabbable');
            return $selected.length;
        });
        $selected && $selected.first().focus();
    });

    dialog2Widget.on('hide', function (e, $el) {
        var layer = (0, _layerWidget['default'])($el);

        if ($el.data('aui-remove-on-hide')) {
            layer.remove();
        }
    });

    (0, _amdify['default'])('aui/dialog2', dialog2Widget);
    (0, _globalize['default'])('dialog2', dialog2Widget);
    module.exports = dialog2Widget;
});
//# sourceMappingURL=../../js/aui/dialog2.js.map