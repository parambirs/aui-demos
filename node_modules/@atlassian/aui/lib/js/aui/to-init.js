(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', 'module', './jquery', './internal/log', './internal/globalize'], factory);
    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
        factory(exports, module, require('./jquery'), require('./internal/log'), require('./internal/globalize'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, mod, global.$, global.logger, global.globalize);
        global.toInit = mod.exports;
    }
})(this, function (exports, module, _jquery, _internalLog, _internalGlobalize) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _$ = _interopRequireDefault(_jquery);

    var _globalize = _interopRequireDefault(_internalGlobalize);

    /**
     * Adds functions to the list of methods to be run on initialisation. Wraps
     * error handling around the provided function so its failure won't prevent
     * other init functions running.
     *
     * @param {Function} func Function to be call on initialisation.
     *
     * @return {Object}
     */
    function toInit(func) {
        (0, _$['default'])(function () {
            try {
                func.apply(this, arguments);
            } catch (ex) {
                _internalLog.log('Failed to run init function: ' + ex + '\n' + func.toString());
            }
        });

        return this;
    }

    (0, _globalize['default'])('toInit', toInit);

    module.exports = toInit;
});
//# sourceMappingURL=../../js/aui/to-init.js.map