(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', 'module', './jquery', './internal/deprecation', './debounce', './internal/globalize', './i18n', './internal/skate', './internal/state', 'skatejs-template-html'], factory);
    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
        factory(exports, module, require('./jquery'), require('./internal/deprecation'), require('./debounce'), require('./internal/globalize'), require('./i18n'), require('./internal/skate'), require('./internal/state'), require('skatejs-template-html'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, mod, global.$, global.deprecate, global.debounce, global.globalize, global.i18n, global.skate, global.state, global.template);
        global.header = mod.exports;
    }
})(this, function (exports, module, _jquery, _internalDeprecation, _debounce, _internalGlobalize, _i18n, _internalSkate, _internalState, _skatejsTemplateHtml) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _$ = _interopRequireDefault(_jquery);

    var _debounce2 = _interopRequireDefault(_debounce);

    var _globalize = _interopRequireDefault(_internalGlobalize);

    var _i18n2 = _interopRequireDefault(_i18n);

    var _skate = _interopRequireDefault(_internalSkate);

    var _state = _interopRequireDefault(_internalState);

    var _template = _interopRequireDefault(_skatejsTemplateHtml);

    var $window = (0, _$['default'])(window);

    function Header(element) {
        var that = this;

        this.element = element;
        this.$element = (0, _$['default'])(element);
        this.index = (0, _$['default'])('aui-header, .aui-header').index(element);
        this.$secondaryNav = this.$element.find('.aui-header-secondary .aui-nav').first();
        this.menuItems = [];
        this.totalWidth = 0;
        this.$moreMenu = undefined;
        this.rightMostNavItemIndex = undefined;
        this.$applicationLogo = this.$element.find('#logo');
        this.moreMenuWidth = 0;
        this.primaryButtonsWidth = 0;

        // to cache the selector and give .find convenience
        this.$headerFind = (function () {
            var $header = (0, _$['default'])(that.$element[0].querySelector('.aui-header-primary'));

            return function (selector) {
                return $header.find(selector);
            };
        })();
    }

    Header.prototype = {
        init: function init() {
            var that = this;

            this.element.setAttribute('data-aui-responsive', 'true');
            this.$headerFind('.aui-button').parent().each(function () {
                that.primaryButtonsWidth += (0, _$['default'])(this).outerWidth(true);
            });

            // remember the widths of all the menu items
            this.$headerFind('.aui-nav > li > a:not(.aui-button)').each(function () {
                var $this = (0, _$['default'])(this).parent();
                var outerWidth = $this.outerWidth(true);

                that.totalWidth += outerWidth;
                that.menuItems.push({
                    $element: $this,
                    outerWidth: outerWidth
                });
            });

            /** The zero based index of the right-most visible nav menu item. */
            this.rightMostNavItemIndex = this.menuItems.length - 1;

            $window.on('resize', this._resizeHandler = (0, _debounce2['default'])(function () {
                that.constructResponsiveDropdown();
            }, 100));

            // So that the header logo doesn't mess things up. (size is unknown before the image loads)
            var $logoImg = this.$applicationLogo.find('img');

            if ($logoImg.length !== 0) {
                $logoImg.attr('data-aui-responsive-header-index', this.index);
                $logoImg.load(function () {
                    that.constructResponsiveDropdown();
                });
            }

            this.constructResponsiveDropdown();

            // show the aui nav (hidden via css on load)
            this.$headerFind('.aui-nav').css('width', 'auto');
        },

        destroy: function destroy() {
            $window.off('resize', this._resizeHandler);
        },

        // calculate widths based on the current state of the page
        calculateAvailableWidth: function calculateAvailableWidth() {
            // if there is no secondary nav, use the right of the screen as the boundary instead
            var rightMostBoundary = this.$secondaryNav.is(':visible') ? this.$secondaryNav.offset().left : this.$element.outerWidth();

            // the right most side of the primary nav, this is assumed to exists if this code is running
            var primaryNavRight = this.$applicationLogo.offset().left + this.$applicationLogo.outerWidth(true) + this.primaryButtonsWidth;

            return rightMostBoundary - primaryNavRight;
        },

        showResponsiveDropdown: function showResponsiveDropdown() {
            if (this.$moreMenu === undefined) {
                this.$moreMenu = this.createResponsiveDropdownTrigger();
            }
            this.$moreMenu.css('display', '');
        },

        hideResponsiveDropdown: function hideResponsiveDropdown() {
            if (this.$moreMenu !== undefined) {
                this.$moreMenu.css('display', 'none');
            }
        },

        constructResponsiveDropdown: function constructResponsiveDropdown() {
            if (!this.menuItems.length) {
                return;
            }

            var remainingWidth;
            var availableWidth = this.calculateAvailableWidth(this.$element, this.primaryButtonsWidth);

            if (availableWidth > this.totalWidth) {
                this.showAll();
            } else {
                this.showResponsiveDropdown();
                remainingWidth = availableWidth - this.moreMenuWidth;

                // Figure out how many nav menu items fit into the available space.
                var newRightMostNavItemIndex = -1;
                while (remainingWidth - this.menuItems[newRightMostNavItemIndex + 1].outerWidth >= 0) {
                    remainingWidth -= this.menuItems[newRightMostNavItemIndex + 1].outerWidth;
                    newRightMostNavItemIndex++;
                }

                if (newRightMostNavItemIndex < this.rightMostNavItemIndex) {
                    this.moveToResponsiveDropdown(this.rightMostNavItemIndex - newRightMostNavItemIndex);
                } else if (this.rightMostNavItemIndex < newRightMostNavItemIndex) {
                    this.moveOutOfResponsiveDropdown(newRightMostNavItemIndex - this.rightMostNavItemIndex);
                }
            }
        },

        // creates the trigger and content elements for the show more dropdown
        createResponsiveDropdownTrigger: function createResponsiveDropdownTrigger() {
            var moreNavItemEl = document.createElement('li');
            var dropdownEl = document.createElement('aui-dropdown-menu');
            dropdownEl.id = 'aui-responsive-header-dropdown-' + this.index;
            _skate['default'].init(dropdownEl);

            var dropdownSectionEl = document.createElement('aui-section');
            dropdownSectionEl.id = 'aui-responsive-header-dropdown-list-' + this.index;
            _skate['default'].init(dropdownSectionEl);

            _template['default'].wrap(dropdownEl).appendChild(dropdownSectionEl);

            var triggerEl = createTriggerAndAssociate(dropdownEl);
            moreNavItemEl.appendChild(triggerEl);
            moreNavItemEl.appendChild(dropdownEl);

            // Append the More menu before any primary buttons.
            if (this.primaryButtonsWidth === 0) {
                this.$headerFind('.aui-nav').append(moreNavItemEl);
            } else {
                this.$headerFind('.aui-nav > li > .aui-button:first').parent().before(moreNavItemEl);
            }

            this.moreMenuWidth = (0, _$['default'])(moreNavItemEl).outerWidth(true);
            return (0, _$['default'])(moreNavItemEl);
        },

        // function that handles moving items out of the show more menu into the app header
        moveOutOfResponsiveDropdown: function moveOutOfResponsiveDropdown(numItems) {
            if (numItems <= 0) {
                return;
            }

            var $moreDropdown = (0, _$['default'])('#aui-responsive-header-dropdown-' + this.index);

            // Move items (working top-to-bottom) from the more menu into the nav bar.
            var leftMostIndexToMove = this.rightMostNavItemIndex + 1;
            var rightMostIndexToMove = this.rightMostNavItemIndex + numItems;
            for (var i = leftMostIndexToMove; i <= rightMostIndexToMove; i++) {
                var $navItem = this.menuItems[i].$element;
                var $navItemTrigger = $navItem.children('a');
                var $navItemDropdown = (0, _$['default'])('#' + $navItemTrigger.attr('aria-controls'));

                if ($navItemTrigger.attr('aria-controls')) {
                    $navItemDropdown.removeClass('aui-dropdown2-sub-menu');
                    $navItem.append($navItemDropdown);
                }

                $moreDropdown.find('aui-item-link:first').remove();
                $navItem.insertBefore(this.$moreMenu);
            }

            this.rightMostNavItemIndex += numItems;
        },

        // function that handles moving items into the show more menu
        moveToResponsiveDropdown: function moveToResponsiveDropdown(numItems) {
            if (numItems <= 0) {
                return;
            }

            var moreDropdownSectionEl = _template['default'].wrap(this.$moreMenu[0].querySelector('aui-section'));

            // Move items (working right-to-left) from the nav bar to the more menu.
            var rightMostIndexToMove = this.rightMostNavItemIndex;
            var leftMostIndexToMove = this.rightMostNavItemIndex - numItems + 1;
            for (var i = rightMostIndexToMove; i >= leftMostIndexToMove; i--) {
                var $navItem = this.menuItems[i].$element;
                var $navItemTrigger = $navItem.children('a');
                var $navItemDropdown = (0, _$['default'])('#' + $navItemTrigger.attr('aria-controls'));

                var moreDropdownItemEl = document.createElement('aui-item-link');
                moreDropdownItemEl.setAttribute('href', $navItemTrigger.attr('href'));
                if ($navItemTrigger.attr('aria-controls')) {
                    moreDropdownItemEl.setAttribute('for', $navItemTrigger.attr('aria-controls'));
                    $navItemDropdown.addClass('aui-dropdown2-sub-menu');
                    $navItemDropdown.appendTo('body');
                }
                _skate['default'].init(moreDropdownItemEl);
                _template['default'].wrap(moreDropdownItemEl).textContent = $navItemTrigger.text();

                $navItem.detach();
                moreDropdownSectionEl.insertBefore(moreDropdownItemEl, moreDropdownSectionEl.firstChild);
            }

            this.rightMostNavItemIndex -= numItems;
        },

        // function that handles show everything
        showAll: function showAll() {
            this.moveOutOfResponsiveDropdown(this.menuItems.length - 1 - this.rightMostNavItemIndex);
            this.hideResponsiveDropdown();
        }
    };

    function createTriggerAndAssociate(dropdown) {
        var trigger = document.createElement('a');
        trigger.setAttribute('class', 'aui-dropdown2-trigger');
        trigger.setAttribute('href', '#');
        trigger.id = dropdown.id + '-trigger';
        trigger.setAttribute('aria-controls', dropdown.id);
        trigger.innerHTML = AJS.I18n.getText('aui.words.more');

        return trigger;
    }

    function createHeader(element) {
        var header = new Header(element);
        header.init();
        return header;
    }

    function findAndCreateHeaders() {
        (0, _$['default'])('.aui-header').each(function () {
            createHeader(this);
        });
    }

    (0, _$['default'])(findAndCreateHeaders);

    var responsiveheader = {};
    responsiveheader.setup = _internalDeprecation.fn(findAndCreateHeaders, 'responsiveheader.setup', {
        removeInVersion: '6.0.0',
        sinceVersion: '5.8.0',
        extraInfo: 'No need to manually initialise anymore as this is now a web component.'
    });

    (0, _skate['default'])('aui-header', {
        created: function created(element) {
            (0, _$['default'])(element).find('.aui-banner').addClass('aui-banner-error');
        },

        attached: function attached(element) {
            (0, _state['default'])(element).set('instance', createHeader(element));
        },

        detached: function detached(element) {
            (0, _state['default'])(element).get('instance').destroy();
        },

        attributes: {
            link: function link(element, data) {
                element.querySelector('#logo > a').setAttribute('href', data.newValue);
            },

            responsive: function responsive(element, data) {
                element.querySelector('.aui-header').setAttribute('data-aui-responsive', data.newValue);
            }
        },

        template: (0, _template['default'])('\n        <content select="aui-banner"></content>\n        <nav class="aui-header aui-dropdown2-trigger-group" role="navigation">\n            <content select=".aui-header-before"></content>\n            <div class="aui-header-primary">\n                <h1 id="logo" class="aui-header-logo">\n                    <a href="/">\n                        <content select=".aui-header-logo, .aui-header-logo-device, .aui-header-logo-text"></content>\n                    </a>\n                </h1>\n                <content select=".aui-header-content"></content>\n            </div>\n            <content select=".aui-header-secondary"></content>\n            <content select=".aui-header-after"></content>\n        </nav>\n    ')
    });

    (0, _globalize['default'])('responsiveheader', responsiveheader);

    module.exports = responsiveheader;
});
//# sourceMappingURL=../../js/aui/header.js.map