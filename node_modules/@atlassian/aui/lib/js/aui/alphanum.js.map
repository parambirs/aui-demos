{"version":3,"sources":["js/aui/alphanum.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,gBAAY,CAAC;;;;;;;;;;;;;AAWb,aAAS,QAAQ,CAAE,CAAC,EAAE,CAAC,EAAE;AACrB,SAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA,CAAE,WAAW,EAAE,CAAC;AAC3B,SAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA,CAAE,WAAW,EAAE,CAAC;;AAE3B,YAAI,MAAM,GAAG,YAAY,CAAC;AAC1B,YAAI,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACzB,YAAI,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACzB,YAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;;AAEzC,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC1B,gBAAI,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE;AACjB,uBAAO,CAAC,CAAC,CAAC;aACb;;AAED,gBAAI,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE;AACjB,uBAAO,CAAC,CAAC;aACZ;;AAED,gBAAI,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;AAClC,gBAAI,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;;AAElC,gBAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;AAC3C,uBAAO,CAAC,EAAE,GAAG,EAAE,CAAA,GAAI,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;aACxC;;AAED,gBAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAA,IAAK,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE;AACnD,uBAAO,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;aACjC;SACJ;;AAED,eAAO,CAAC,CAAC;KACZ;;AAED,+BAAU,UAAU,EAAE,QAAQ,CAAC,CAAC;;qBAEjB,QAAQ","file":"js/aui/alphanum.js","sourcesContent":["'use strict';\n\nimport globalize from './internal/globalize';\n\n/**\n * Compare two strings in alphanumeric way\n * @method alphanum\n * @param {String} a first string to compare\n * @param {String} b second string to compare\n * @return {Number(-1|0|1)} -1 if a < b, 0 if a = b, 1 if a > b\n */\nfunction alphanum (a, b) {\n    a = (a + '').toLowerCase();\n    b = (b + '').toLowerCase();\n\n    var chunks = /(\\d+|\\D+)/g;\n    var am = a.match(chunks);\n    var bm = b.match(chunks);\n    var len = Math.max(am.length, bm.length);\n\n    for (var i = 0; i < len; i++) {\n        if (i === am.length) {\n            return -1;\n        }\n\n        if (i === bm.length) {\n            return 1;\n        }\n\n        var ad = parseInt(am[i], 10) + '';\n        var bd = parseInt(bm[i], 10) + '';\n\n        if (ad === am[i] && bd === bm[i] && ad !== bd) {\n            return (ad - bd) / Math.abs(ad - bd);\n        }\n\n        if ((ad !== am[i] || bd !== bm[i]) && am[i] !== bm[i]) {\n            return am[i] < bm[i] ? -1 : 1;\n        }\n    }\n\n    return 0;\n}\n\nglobalize('alphanum', alphanum);\n\nexport default alphanum;\n"],"sourceRoot":"/source/"}