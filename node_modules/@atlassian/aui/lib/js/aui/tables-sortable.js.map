{"version":3,"sources":["js/aui/tables-sortable.js"],"names":[],"mappings":"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","file":"js/aui/tables-sortable.js","sourcesContent":["'use strict';\n\nimport $ from './jquery';\nimport '../../js-vendor/jquery/jquery.tablesorter';\nimport globalize from './internal/globalize';\n\nvar DEFAULT_SORT_OPTIONS = {\n    sortMultiSortKey: '',\n    headers: {},\n    debug: false,\n    tabIndex: false\n};\n\nfunction sortTable($table) {\n    var options = DEFAULT_SORT_OPTIONS;\n    $table.find('th').each(function (index, header) {\n\n        var $header = $(header);\n        options.headers[index] = {};\n        if ($header.hasClass('aui-table-column-unsortable')) {\n            options.headers[index].sorter = false;\n        } else {\n            $header.attr('tabindex', '0');\n            $header.wrapInner(\"<span class='aui-table-header-content'/>\");\n            if ($header.hasClass('aui-table-column-issue-key')) {\n                options.headers[index].sorter = 'issue-key';\n            }\n        }\n    });\n    $table.tablesorter(options);\n}\n\nvar tablessortable = {\n    setup: function () {\n\n        /*\n        This parser is used for issue keys in the format <PROJECT_KEY>-<ISSUE_NUMBER>, where <PROJECT_KEY> is a maximum\n        10 character string with characters(A-Z). Assumes that issue number is no larger than 999,999. e.g. not more\n        than a million issues.\n        This pads the issue key to allow for proper string sorting so that the project key is always 10 characters and the\n        issue number is always 6 digits. e.g. it appends the project key '.' until it is 10 characters long and prepends 0\n        so that the issue number is 6 digits long. e.g. CONF-102 == CONF......000102. This is to allow proper string sorting.\n        */\n        $.tablesorter.addParser({\n            id: 'issue-key',\n            is: function () {\n                return false;\n            },\n\n            format: function (s) {\n                var keyComponents = s.split('-');\n                var projectKey = keyComponents[0];\n                var issueNumber = keyComponents[1];\n\n                var PROJECT_KEY_TEMPLATE = '..........';\n                var ISSUE_NUMBER_TEMPLATE = '000000';\n                var stringRepresentation = (projectKey + PROJECT_KEY_TEMPLATE).slice(0, PROJECT_KEY_TEMPLATE.length);\n                stringRepresentation += (ISSUE_NUMBER_TEMPLATE + issueNumber).slice(-ISSUE_NUMBER_TEMPLATE.length);\n\n                return stringRepresentation;\n            },\n\n            type: 'text'\n        });\n\n        /*\n        Text parser that uses the data-sort-value attribute for sorting if it is set and data-sort-type is not set\n        or set to 'text'.\n        */\n        $.tablesorter.addParser({\n            id: 'textSortAttributeParser',\n            is: function (nodeValue, table, node) {\n                return node.hasAttribute('data-sort-value') && (!node.hasAttribute('data-sort-type') || node.getAttribute('data-sort-type') === 'text');\n            },\n            format: function (nodeValue, table, node, offset) {\n                return node.getAttribute('data-sort-value');\n            },\n            type: 'text'\n        });\n\n        /*\n        Numeric parser that uses the data-sort-value attribute for sorting if it is set and data-sort-type is set\n        to 'numeric'.\n        */\n        $.tablesorter.addParser({\n            id: 'numericSortAttributeParser',\n            is: function (nodeValue, table, node) {\n                return node.getAttribute('data-sort-type') === 'numeric' && node.hasAttribute('data-sort-value');\n            },\n            format: function (nodeValue, table, node, offset) {\n                return node.getAttribute('data-sort-value');\n            },\n            type: 'numeric'\n        });\n\n        $('.aui-table-sortable').each(function () {\n            sortTable($(this));\n        });\n    },\n\n    setTableSortable: function ($table) {\n        sortTable($table);\n    }\n};\n\n$(tablessortable.setup);\n\nglobalize('tablessortable', tablessortable);\n\nexport default tablessortable;\n"],"sourceRoot":"/source/"}