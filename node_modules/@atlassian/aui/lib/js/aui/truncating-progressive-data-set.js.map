{"version":3,"sources":["js/aui/truncating-progressive-data-set.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,gBAAY,CAAC;;;;;;;;AAKb,QAAI,4BAA4B,GAAG,+BAAmB,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;AAqBzD,kBAAU,EAAE,oBAAU,MAAM,EAAE,OAAO,EAAE;AACnC,gBAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,eAAe,CAAC;AAChD,2CAAmB,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;SACvE;;AAED,4BAAoB,EAAE,8BAAU,OAAO,EAAE;AACrC,gBAAI,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAClD,mBAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,gBAAgB,CAAC;SACjE;;;;;;;;;;;;AAYD,yBAAiB,EAAE,2BAAU,KAAK,EAAE;AAChC,mBAAO,KAAK,EAAE;AACV,oBAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;;AAE1C,oBAAI,QAAQ,EAAE;AACV,2BAAO,QAAQ,CAAC;iBACnB;;AAED,qBAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aAC7C;;AAED,mBAAO,IAAI,CAAC;SACf;KACJ,CAAC,CAAC;;AAEH,+BAAU,8BAA8B,EAAE,4BAA4B,CAAC,CAAC;;qBAEzD,4BAA4B","file":"js/aui/truncating-progressive-data-set.js","sourcesContent":["'use strict';\n\nimport globalize from './internal/globalize';\nimport ProgressiveDataSet from './progressive-data-set';\n\nvar TruncatingProgressiveDataSet = ProgressiveDataSet.extend({\n    /**\n     * This is a subclass of ProgressiveDataSet. It differs from the superclass\n     * in that it works on large data sets where the server truncates results.\n     *\n     * Rather than determining whether to request more information based on its cache,\n     * it uses the size of the response.\n     *\n     * @example\n     * var source = new TruncatingProgressiveDataSet([], {\n     *     model: Backbone.Model.extend({ idAttribute: \"username\" }),\n     *     queryEndpoint: \"/jira/rest/latest/users\",\n     *     queryParamKey: \"username\",\n     *     matcher: function(model, query) {\n     *         return _.startsWith(model.get('username'), query);\n     *     },\n     *     maxResponseSize: 20\n     * });\n     * source.on('respond', doStuffWithMatchingResults);\n     * source.query('john');\n     */\n    initialize: function (models, options) {\n        this._maxResponseSize = options.maxResponseSize;\n        ProgressiveDataSet.prototype.initialize.call(this, models, options);\n    },\n\n    shouldGetMoreResults: function (results) {\n        var response = this.findQueryResponse(this.value);\n        return !response || response.length === this._maxResponseSize;\n    },\n\n    /**\n     * Returns the response for the given query.\n     *\n     * The default implementation assumes that the endpoint's search algorithm is a prefix\n     * matcher.\n     *\n     * @param query the value to find existing responses\n     * @return {Object[]} an array of values representing the IDs of the models provided by the response for the given query.\n     * Null is returned if no response is found.\n     */\n    findQueryResponse: function (query) {\n        while (query) {\n            var response = this.findQueryCache(query);\n\n            if (response) {\n                return response;\n            }\n\n            query = query.substr(0, query.length - 1);\n        }\n\n        return null;\n    }\n});\n\nglobalize('TruncatingProgressiveDataSet', TruncatingProgressiveDataSet);\n\nexport default TruncatingProgressiveDataSet;\n"],"sourceRoot":"/source/"}