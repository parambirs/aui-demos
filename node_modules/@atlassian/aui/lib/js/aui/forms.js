(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', './jquery', './internal/globalize'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports, require('./jquery'), require('./internal/globalize'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.$, global.globalize);
        global.forms = mod.exports;
    }
})(this, function (exports, _jquery, _internalGlobalize) {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
        value: true
    });

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _$ = _interopRequireDefault(_jquery);

    var _globalize = _interopRequireDefault(_internalGlobalize);

    /**
     * Enables the specified form element.
     *
     * @param {Element} el The element to enable.
     * @param {Boolean} b The flag setting enabled / disabled.
     *
     * @returns {jQuery}
     */
    function enable(el, b) {
        var $el = (0, _$['default'])(el);

        if (typeof b === 'undefined') {
            b = true;
        }

        return $el.each(function () {
            this.disabled = !b;
        });
    }

    /**
     * Forms: Inline Help - toggles visibility of inline help content.
     *
     * @method inlineHelp
     * @namespace AJS
     * @for AJS
     */
    function inlineHelp() {
        (0, _$['default'])('.icon-inline-help').click(function () {
            var $t = (0, _$['default'])(this).siblings('.field-help');
            if ($t.hasClass('hidden')) {
                $t.removeClass('hidden');
            } else {
                $t.addClass('hidden');
            }
        });
    }

    (0, _globalize['default'])('enable', enable);
    (0, _globalize['default'])('inlineHelp', inlineHelp);

    exports.enable = enable;
    exports.inlineHelp = inlineHelp;
});
//# sourceMappingURL=../../js/aui/forms.js.map