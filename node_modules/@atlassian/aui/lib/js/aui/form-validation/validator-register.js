(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', 'module', '../jquery', '../internal/log', '../internal/amdify'], factory);
    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
        factory(exports, module, require('../jquery'), require('../internal/log'), require('../internal/amdify'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, mod, global.$, global.logger, global.amdify);
        global.validatorRegister = mod.exports;
    }
})(this, function (exports, module, _jquery, _internalLog, _internalAmdify) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _$ = _interopRequireDefault(_jquery);

    var _amdify = _interopRequireDefault(_internalAmdify);

    var ATTRIBUTE_RESERVED_ARGUMENTS = ['displayfield', 'watchfield', 'when', 'novalidate', 'state'];
    var _validators = [];

    function getReservedArgument(validatorArguments) {
        var reservedArgument = false;

        validatorArguments.some(function (arg) {
            var isReserved = _$['default'].inArray(arg, ATTRIBUTE_RESERVED_ARGUMENTS) !== -1;

            if (isReserved) {
                reservedArgument = arg;
            }

            return isReserved;
        });

        return reservedArgument;
    }

    /**
     * Register a validator that can be used to validate fields. The main entry point for validator plugins.
     * @param trigger - when to run the validator. Can be an array of arguments, or a selector
     * @param validatorFunction - the function that will be called on the field to determine validation. Receives
     *      field - the field that is being validated
     *      args - the arguments that have been specified in HTML markup.
     */
    function registerValidator(trigger, validatorFunction) {
        var triggerSelector;

        if (typeof trigger === 'string') {
            triggerSelector = trigger;
        } else {
            var reservedArgument = getReservedArgument(trigger);

            if (reservedArgument) {
                _internalLog.warn('Validators cannot be registered with the argument "' + reservedArgument + '", as it is a reserved argument.');
                return false;
            }

            triggerSelector = '[data-aui-validation-' + trigger.join('],[data-aui-validation-') + ']';
        }

        var validator = {
            validatorFunction: validatorFunction,
            validatorTrigger: triggerSelector
        };

        _validators.push(validator);

        return validator;
    }

    var validatorRegister = {
        register: registerValidator,
        validators: function validators() {
            return _validators;
        }
    };

    (0, _amdify['default'])('aui/form-validation/validator-register', validatorRegister);

    module.exports = validatorRegister;
});
//# sourceMappingURL=../../../js/aui/form-validation/validator-register.js.map