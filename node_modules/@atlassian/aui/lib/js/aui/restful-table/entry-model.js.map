{"version":3,"sources":["js/aui/restful-table/entry-model.js"],"names":[],"mappings":"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","file":"js/aui/restful-table/entry-model.js","sourcesContent":["'use strict';\n\nimport $ from '../jquery';\nimport { triggerEvtForInst } from '../events';\nimport _ from '../underscore';\nimport Backbone from '../backbone';\nimport events from './events';\n\n/**\n * A class provided to fill some gaps with the out of the box Backbone.Model class. Most notiably the inability\n * to send ONLY modified attributes back to the server.\n */\nvar EntryModel = Backbone.Model.extend({\n    sync: function (method, model, options) {\n        var instance = this;\n        var oldError = options.error;\n\n        options.error = function (xhr) {\n            instance._serverErrorHandler(xhr, this);\n            if (oldError) {\n                oldError.apply(this, arguments);\n            }\n        };\n\n        return Backbone.sync.apply(Backbone, arguments);\n    },\n\n    /**\n     * Overrides default save handler to only save (send to server) attributes that have changed.\n     * Also provides some default error handling.\n     *\n     * @override\n     * @param attributes\n     * @param options\n     */\n    save: function (attributes, options) {\n        options = options || {};\n\n        var instance = this,\n            Model,\n            syncModel,\n            error = options.error, // we override, so store original\n            success = options.success;\n\n\n        // override error handler to provide some defaults\n        options.error = function (model, xhr) {\n\n            var data = $.parseJSON(xhr.responseText || xhr.data);\n\n            // call original error handler\n            if (error) {\n                error.call(instance, instance, data, xhr);\n            }\n        };\n\n        // if it is a new model, we don't have to worry about updating only changed attributes because they are all new\n        if (this.isNew()) {\n\n            // call super\n            Backbone.Model.prototype.save.call(this, attributes, options);\n\n        // only go to server if something has changed\n        } else if (attributes) {\n            // create temporary model\n            Model = EntryModel.extend({\n                url: this.url()\n            });\n\n            syncModel = new Model({\n                id: this.id\n            });\n\n            syncModel.save = Backbone.Model.prototype.save;\n\n            options.success = function (model, xhr) {\n\n                // update original model with saved attributes\n                instance.clear().set(model.toJSON());\n\n                // call original success handler\n                if (success) {\n                    success.call(instance, instance, xhr);\n                }\n            };\n\n            // update temporary model with the changed attributes\n            syncModel.save(attributes, options);\n        }\n    },\n\n    /**\n     * Destroys the model on the server. We need to override the default method as it does not support sending of\n     * query paramaters.\n     *\n     * @override\n     * @param options\n     * ... {function} success - Server success callback\n     * ... {function} error - Server error callback\n     * ... {object} data\n     *\n     * @return EntryModel\n     */\n    destroy: function (options) {\n        options = options || {};\n\n        var instance = this,\n            url = this.url(),\n            data;\n\n        if (options.data) {\n            data = $.param(options.data);\n        }\n\n        if (data !== '') {\n            // we need to add to the url as the data param does not work for jQuery DELETE requests\n            url = url + '?' + data;\n        }\n\n        $.ajax({\n            url: url,\n            type: 'DELETE',\n            dataType: 'json',\n            contentType: 'application/json',\n            success: function (data) {\n                if (instance.collection){\n                    instance.collection.remove(instance);\n                }\n                if (options.success) {\n                    options.success.call(instance, data);\n                }\n            },\n            error: function (xhr) {\n                instance._serverErrorHandler(xhr, this);\n                if (options.error) {\n                    options.error.call(instance, xhr);\n                }\n            }\n        });\n\n        return this;\n    },\n\n\n    /**\n     * A more complex lookup for changed attributes then default backbone one.\n     *\n     * @param attributes\n     */\n    changedAttributes: function (attributes) {\n        var changed = {};\n        var current = this.toJSON();\n\n        $.each(attributes, function (name, value) {\n\n            if (!current[name]) {\n                if (typeof value === 'string') {\n                    if ($.trim(value) !== '') {\n                        changed[name] = value;\n                    }\n                } else if ($.isArray(value)) {\n                    if (value.length !== 0) {\n                        changed[name] = value;\n                    }\n                } else {\n                    changed[name] = value;\n                }\n            } else if (current[name] && current[name] !== value) {\n\n                if (typeof value === 'object') {\n                    if (!_.isEqual(value, current[name])) {\n                        changed[name] = value;\n                    }\n                } else {\n                    changed[name] = value;\n                }\n            }\n        });\n\n        if (!_.isEmpty(changed)) {\n            this.addExpand(changed);\n            return changed;\n        }\n    },\n\n    /**\n     * Useful point to override if you always want to add an expand to your rest calls.\n     *\n     * @param changed attributes that have already changed\n     */\n    addExpand: function (changed) {},\n\n    /**\n     * Throws a server error event unless user input validation error (status 400)\n     *\n     * @param xhr\n     */\n    _serverErrorHandler: function (xhr, ajaxOptions) {\n        var data;\n        if (xhr.status !== 400) {\n            data = $.parseJSON(xhr.responseText || xhr.data);\n            triggerEvtForInst(events.SERVER_ERROR, this, [data, xhr, ajaxOptions]);\n        }\n    },\n\n    /**\n     * Fetches values, with some generic error handling\n     *\n     * @override\n     * @param options\n     */\n    fetch: function (options) {\n        options = options || {};\n\n        // clear the model, so we do not merge the old with the new\n        this.clear();\n\n        // call super\n        Backbone.Model.prototype.fetch.call(this, options);\n    }\n});\n\nexport default EntryModel;\n"],"sourceRoot":"/source/"}