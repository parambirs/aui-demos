(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', './jquery'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports, require('./jquery'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.$);
        global.expander = mod.exports;
    }
})(this, function (exports, _jquery) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _$ = _interopRequireDefault(_jquery);

    var $document = (0, _$['default'])(document),

    //convenience function because this needs to be run for all the events.
    getExpanderProperties = function getExpanderProperties(event) {
        var properties = {};

        properties.$trigger = (0, _$['default'])(event.currentTarget);
        properties.$content = $document.find('#' + properties.$trigger.attr('aria-controls'));
        properties.triggerIsParent = properties.$content.parent().filter(properties.$trigger).length !== 0;
        properties.$shortContent = properties.triggerIsParent ? properties.$trigger.find('.aui-expander-short-content') : null;
        properties.height = properties.$content.css('min-height');
        properties.isCollapsible = properties.$trigger.data('collapsible') !== false;
        properties.replaceText = properties.$trigger.attr('data-replace-text'); //can't use .data here because it doesn't update after the first call
        properties.replaceSelector = properties.$trigger.data('replace-selector');

        return properties;
    },
        replaceText = function replaceText(properties) {
        if (properties.replaceText) {
            var $replaceElement = properties.replaceSelector ? properties.$trigger.find(properties.replaceSelector) : properties.$trigger;

            properties.$trigger.attr('data-replace-text', $replaceElement.text());
            $replaceElement.text(properties.replaceText);
        }
    };
    //events that the expander listens to
    var EXPANDER_EVENTS = {
        'aui-expander-invoke': function auiExpanderInvoke(event) {
            var $trigger = (0, _$['default'])(event.currentTarget);
            var $content = $document.find('#' + $trigger.attr('aria-controls'));
            var isCollapsible = $trigger.data('collapsible') !== false;

            //determine if content should be expanded or collapsed
            if ($content.attr('aria-expanded') === 'true' && isCollapsible) {
                $trigger.trigger('aui-expander-collapse');
            } else {
                $trigger.trigger('aui-expander-expand');
            }
        },

        'aui-expander-expand': function auiExpanderExpand(event) {
            var properties = getExpanderProperties(event);

            properties.$content.attr('aria-expanded', 'true');
            properties.$trigger.attr('aria-expanded', 'true');

            if (properties.$content.outerHeight() > 0) {
                properties.$content.attr('aria-hidden', 'false');
            }

            //handle replace text
            replaceText(properties);

            //if the trigger is the parent also hide the short-content (default)
            if (properties.triggerIsParent) {
                properties.$shortContent.hide();
            }
            properties.$trigger.trigger('aui-expander-expanded');
        },

        'aui-expander-collapse': function auiExpanderCollapse(event) {
            var properties = getExpanderProperties(event);

            //handle replace text
            replaceText(properties);

            //collapse the expander
            properties.$content.attr('aria-expanded', 'false');
            properties.$trigger.attr('aria-expanded', 'false');

            //if the trigger is the parent also hide the short-content (default)
            if (properties.triggerIsParent) {
                properties.$shortContent.show();
            }

            //handle the height option
            if (properties.$content.outerHeight() === 0) {
                properties.$content.attr('aria-hidden', 'true');
            }

            properties.$trigger.trigger('aui-expander-collapsed');
        },

        'click.aui-expander': function clickAuiExpander(event) {
            var $target = (0, _$['default'])(event.currentTarget);
            $target.trigger('aui-expander-invoke', event.currentTarget);
        }
    };

    //delegate events to the triggers on the page
    $document.on(EXPANDER_EVENTS, '.aui-expander-trigger');
});
//# sourceMappingURL=../../js/aui/expander.js.map