{"version":3,"sources":["js/aui/binder.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,gBAAY,CAAC;;;;;;;;;;;;;;;;;;;;AAmBb,QAAI,MAAM,GAAI,CAAA,YAAY;AACtB,oBAAY,CAAC;;AAEb,YAAI,OAAO,GAAG,EAAE,CAAC;;AAEjB,eAAO;;;;;;;AAOH,sBAAU,EAAE,oBAAU,KAAK,EAAE;AACzB,oBAAI,cAAE,aAAa,CAAC,OAAO,CAAC,EAAE;AAC1B,iCAAO,GAAG,CAAC,mBAAmB,CAAC,CAAC;AAChC,2BAAO;iBACV;;AAED,qBAAK,GAAG,KAAK,IAAI,QAAQ,CAAC,IAAI,CAAC;;AAE/B,mCAAE,qBAAqB,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE;AACvD,wBAAI,QAAQ,GAAG,mBAAE,OAAO,CAAC,CAAC;AAC1B,kCAAE,IAAI,CAAC,OAAO,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE;AAClC,4BAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;AACpD,yCAAO,GAAG,CAAC,4BAA4B,GAAG,EAAE,GAAG,cAAc,GAAG,OAAO,CAAC,CAAC;AACzE,oCAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;AACxB,kCAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;yBACvB;qBACJ,CAAC,CAAC;iBACN,CAAC,CAAC;aAEN;;;;;;AAMD,oBAAQ,EAAE,kBAAU,EAAE,EAAE,MAAM,EAAE;AAC5B,uBAAO,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;aACxB;;;;;;AAMD,sBAAU,EAAE,oBAAU,EAAE,EAAE;AACtB,uBAAO,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;aACtB;SACJ,CAAC;KACL,CAAA,EAAE,AAAC,CAAC;;AAEL,UAAM,GAAG,qBAAU,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE;AAC3C,oBAAY,EAAE,OAAO;KACxB,CAAC,CAAC;;AAEH,+BAAU,QAAQ,EAAE,MAAM,CAAC,CAAC;;qBAEb,MAAM","file":"js/aui/binder.js","sourcesContent":["'use strict';\n\nimport $ from './jquery';\nimport * as deprecate from './internal/deprecation';\nimport * as logger from './internal/log';\nimport globalize from './internal/globalize';\n\n/**\n * Support for markup based binder components. Binder components must be objects with the following \"interface\":\n *\n * <pre>\n * {\n *   selector: \"input.foo\",\n *   run: function(element) {\n *      //do stuff on given element\n *   }\n * }\n * </pre>\n */\nvar Binder = (function () {\n    'use strict';\n\n    var binders = {};\n\n    return {\n        /**\n         * Runs all the binder components for the given scope, or the document body if none specified.\n         *\n         * @method runBinders\n         * @param scope {Element} element scope to run the binders in\n         */\n        runBinders: function (scope) {\n            if ($.isEmptyObject(binders)) {\n                logger.log('No binders to run');\n                return;\n            }\n\n            scope = scope || document.body;\n\n            $('*:not(link, script)', scope).each(function (i, element) {\n                var $element = $(element);\n                $.each(binders, function (id, binder) {\n                    if (!$element.data(id) && $element.is(binder.selector)) {\n                        logger.log('Running binder component: ' + id + ' on element ' + element);\n                        $element.data(id, true); // so we don't bind to the same element again later\n                        binder.run(element);\n                    }\n                });\n            });\n\n        },\n\n        /**\n         * Register a binder component with the given id.\n         * @method register\n         */\n        register: function (id, binder) {\n            binders[id] = binder;\n        },\n\n        /**\n         * Unregister a binder component for the given id.\n         * @method unregister\n         */\n        unregister: function (id) {\n            binders[id] = null;\n        }\n    };\n}());\n\nBinder = deprecate.construct(Binder, 'Binder', {\n    sinceVersion: '5.8.0'\n});\n\nglobalize('Binder', Binder);\n\nexport default Binder;\n"],"sourceRoot":"/source/"}