(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', 'module', './underscore', './backbone', './internal/globalize', './result-set'], factory);
    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
        factory(exports, module, require('./underscore'), require('./backbone'), require('./internal/globalize'), require('./result-set'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, mod, global._, global.Backbone, global.globalize, global.ResultSet);
        global.resultsList = mod.exports;
    }
})(this, function (exports, module, _underscore, _backbone, _internalGlobalize, _resultSet) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _2 = _interopRequireDefault(_underscore);

    var _Backbone = _interopRequireDefault(_backbone);

    var _globalize = _interopRequireDefault(_internalGlobalize);

    var _ResultSet = _interopRequireDefault(_resultSet);

    var ResultsList = _Backbone['default'].View.extend({
        events: {
            'click [data-id]': 'setSelection'
        },

        initialize: function initialize(options) {
            if (!this.model) {
                this.model = new _ResultSet['default']({ source: options.source });
            }

            if (!(this.model instanceof _ResultSet['default'])) {
                throw new Error('model must be set to a ResultSet');
            }

            this.model.bind('update', this.process, this);

            this.render = _2['default'].wrap(this.render, function (func) {
                this.trigger('rendering');
                func.apply(this, arguments);
                this.trigger('rendered');
            });
        },

        process: function process() {
            if (!this._shouldShow(this.model.get('query'))) {
                return;
            }
            this.show();
        },

        render: function render() {
            var ul = _Backbone['default'].$('<ul/>');
            this.model.each(function (model) {
                var li = _Backbone['default'].$('<li/>').attr('data-id', model.id).html(this.renderItem(model)).appendTo(ul);
            }, this);
            this.$el.html(ul);
            return this;
        },

        renderItem: function renderItem() {
            return;
        },

        setSelection: function setSelection(event) {
            var id = event.target.getAttribute('data-id');
            var selected = this.model.setActive(id);
            this.trigger('selected', selected);
        },

        show: function show() {
            this.lastQuery = this.model.get('query');
            this._hiddenQuery = null;
            this.render();
            this.$el.show();
        },

        hide: function hide() {
            this.$el.hide();
            this._hiddenQuery = this.lastQuery;
        },

        size: function size() {
            return this.model.get('length');
        },

        _shouldShow: function _shouldShow(query) {
            return query === '' || !(this._hiddenQuery && this._hiddenQuery === query);
        }
    });

    (0, _globalize['default'])('ResultsList', ResultsList);

    module.exports = ResultsList;
});
//# sourceMappingURL=../../js/aui/results-list.js.map