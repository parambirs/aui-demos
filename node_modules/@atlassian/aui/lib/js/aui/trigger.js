(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', './jquery', './internal/amdify', './internal/skate'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports, require('./jquery'), require('./internal/amdify'), require('./internal/skate'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.$, global.amdify, global.skate);
        global.trigger = mod.exports;
    }
})(this, function (exports, _jquery, _internalAmdify, _internalSkate) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _$ = _interopRequireDefault(_jquery);

    var _amdify = _interopRequireDefault(_internalAmdify);

    var _skate = _interopRequireDefault(_internalSkate);

    function isNestedAnchor(trigger, target) {
        var $closestAnchor = (0, _$['default'])(target).closest('a[href]', trigger);
        return !!$closestAnchor.length && $closestAnchor[0] !== trigger;
    }

    function findControlled(trigger) {
        return document.getElementById(trigger.getAttribute('aria-controls'));
    }

    function triggerMessage(trigger, e) {
        if (trigger.isEnabled()) {
            var component = findControlled(trigger);
            if (component && component.message) {
                component.message(e);
            }
        }
    }

    (0, _skate['default'])('data-aui-trigger', {
        type: _skate['default'].type.ATTRIBUTE,
        events: {
            click: function click(trigger, e) {
                if (!isNestedAnchor(trigger, e.target)) {
                    triggerMessage(trigger, e);
                    e.preventDefault();
                }
            },
            mouseenter: function mouseenter(trigger, e) {
                triggerMessage(trigger, e);
            },
            mouseleave: function mouseleave(trigger, e) {
                triggerMessage(trigger, e);
            },
            focus: function focus(trigger, e) {
                triggerMessage(trigger, e);
            },
            blur: function blur(trigger, e) {
                triggerMessage(trigger, e);
            }
        },
        prototype: {
            disable: function disable() {
                this.setAttribute('aria-disabled', 'true');
            },
            enable: function enable() {
                this.setAttribute('aria-disabled', 'false');
            },
            isEnabled: function isEnabled() {
                return this.getAttribute('aria-disabled') !== 'true';
            }
        }
    });

    (0, _amdify['default'])('aui/trigger');
});
//# sourceMappingURL=../../js/aui/trigger.js.map