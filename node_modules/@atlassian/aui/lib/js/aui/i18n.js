(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', 'module', './format', './internal/globalize', './internal/i18n/aui'], factory);
    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
        factory(exports, module, require('./format'), require('./internal/globalize'), require('./internal/i18n/aui'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, mod, global.format, global.globalize, global.keys);
        global.i18n = mod.exports;
    }
})(this, function (exports, module, _format, _internalGlobalize, _internalI18nAui) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _format2 = _interopRequireDefault(_format);

    var _globalize = _interopRequireDefault(_internalGlobalize);

    var _keys = _interopRequireDefault(_internalI18nAui);

    /**
     * Returns the value defined in AJS.I18n.keys for the given key. If AJS.I18n.keys does not exist, or if the given key does not exist,
     * the key is returned - this could occur in plugin mode if the I18n transform is not performed;
     * or in flatpack mode if the i18n JS file is not loaded.
     */
    var i18n = {
        keys: _keys['default'],
        getText: function getText(key) {
            var params = Array.prototype.slice.call(arguments, 1);

            if (Object.prototype.hasOwnProperty.call(this.keys, key)) {
                return _format2['default'].apply(null, [this.keys[key]].concat(params));
            }

            return key;
        }
    };

    (0, _globalize['default'])('I18n', i18n);

    module.exports = i18n;
});
//# sourceMappingURL=../../js/aui/i18n.js.map