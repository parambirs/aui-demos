(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', 'module', './jquery', './internal/deprecation', './internal/log', './internal/globalize', './key-code', './internal/skate', './template'], factory);
    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
        factory(exports, module, require('./jquery'), require('./internal/deprecation'), require('./internal/log'), require('./internal/globalize'), require('./key-code'), require('./internal/skate'), require('./template'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, mod, global.$, global.deprecate, global.logger, global.globalize, global.keyCode, global.skate, global.template);
        global.messages = mod.exports;
    }
})(this, function (exports, module, _jquery, _internalDeprecation, _internalLog, _internalGlobalize, _keyCode, _internalSkate, _template) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _$ = _interopRequireDefault(_jquery);

    var _globalize = _interopRequireDefault(_internalGlobalize);

    var _keyCode2 = _interopRequireDefault(_keyCode);

    var _skate = _interopRequireDefault(_internalSkate);

    var _template2 = _interopRequireDefault(_template);

    var DEFAULT_FADEOUT_DURATION = 500;
    var DEFAULT_FADEOUT_DELAY = 5000;
    var FADEOUT_RESTORE_DURATION = 100;

    var MESSAGE_TEMPLATE = '<div class="aui-message aui-message-{type} {type} {closeable} {shadowed} {fadeout}">' + '<p class="title">' + '<strong>{title}</strong>' + '</p>' + '{body}<!-- .aui-message -->' + '</div>';

    function createMessageConstructor(type) {
        /**
         *
         * @param context
         * @param {Object} obj - message configuration
         * @param {boolean} [obj.id] - ID to add to the message
         * @param {boolean} obj.body - Content of the message
         * @param {boolean} [obj.closeable]
         * @param {boolean} [obj.shadowed]
         * @param {boolean} [obj.fadeout]
         * @param {boolean} [obj.duration]
         * @param {boolean} [obj.delay]
         * @returns {*|HTMLElement}
         */
        messages[type] = function (context, obj) {
            if (!obj) {
                obj = context;
                context = '#aui-message-bar';
            }

            // Set up our template options
            obj.closeable = obj.closeable !== null && obj.closeable !== false;

            // shadowed no longer does anything but left in so it doesn't break
            obj.shadowed = obj.shadowed !== null && obj.shadowed !== false;

            var $message = renderMessageElement(this.template, obj, type);
            insertMessageIntoContext($message, obj.insert, context);

            // Attach the optional extra behaviours
            if (obj.closeable) {
                makeCloseable($message);
            }

            if (obj.fadeout) {
                makeFadeout($message, obj.delay, obj.duration);
            }

            return $message;
        };
    }

    function makeCloseable(message) {
        (0, _$['default'])(message || 'div.aui-message.closeable').each(function () {
            var $this = (0, _$['default'])(this);
            var $closeIcons = $this.find('.aui-icon.icon-close');
            var $icon = $closeIcons.length > 0 ? $closeIcons.first() : (0, _$['default'])('<span class="aui-icon icon-close" role="button" tabindex="0"></span>');

            $this.addClass('closeable');
            $this.append($icon);

            initCloseMessageBoxOnClickAndKeypress($this);
        });
    }

    function makeFadeout(message, delay, duration) {
        delay = typeof delay !== 'undefined' ? delay : DEFAULT_FADEOUT_DELAY;
        duration = typeof duration !== 'undefined' ? duration : DEFAULT_FADEOUT_DURATION;

        (0, _$['default'])(message || 'div.aui-message.fadeout').each(function () {
            var $this = (0, _$['default'])(this);

            //Store the component state to avoid collisions between animations
            var hasFocus = false;
            var isHover = false;

            //Small functions to keep the code easier to read and avoid code duplication
            function fadeOut() {
                //Algorithm:
                //1. Stop all running animations (first arg), including any fade animation and delay
                //   Do not jump to the end of the animation (second arg). This prevents the message to abruptly
                //   jump to opacity:0 or opacity:1
                //2. Wait <delay> ms before starting the fadeout
                //3. Start the fadeout with a duration of <duration> ms
                //4. Close the message at the end of the animation
                $this.stop(true, false).delay(delay).fadeOut(duration, function () {
                    $this.closeMessage();
                });
            }
            function resetFadeOut() {
                //Algorithm:
                //1. Stop all running animations (first arg), including any fade animation and delay
                //   Do not jump to the end of the animation (second arg). This prevents the message to abruptly
                //   jump to opacity:0 or opacity:1
                //2. Fast animation to opacity:1
                $this.stop(true, false).fadeTo(FADEOUT_RESTORE_DURATION, 1);
            }
            function shouldStartFadeOut() {
                return !hasFocus && !isHover;
            }

            //Attach handlers for user interactions (focus and hover)
            $this.focusin(function () {
                hasFocus = true;
                resetFadeOut();
            }).focusout(function () {
                hasFocus = false;
                if (shouldStartFadeOut()) {
                    fadeOut();
                }
            }).hover(function () {
                //should be called .hoverin(), but jQuery does not implement that method
                isHover = true;
                resetFadeOut();
            }, function () {
                //should be called .hoverout(), but jQuery does not implement that method
                isHover = false;
                if (shouldStartFadeOut()) {
                    fadeOut();
                }
            });

            //Initial animation
            fadeOut();
        });
    }

    /**
     * Utility methods to display different message types to the user.
     * Usage:
     * <pre>
     * messages.info("#container", {
         *   title: "Info",
         *   body: "You can choose to have messages without Close functionality.",
         *   closeable: false,
         *   shadowed: false
         * });
     * </pre>
     */
    var messages = {
        setup: function setup() {
            makeCloseable();
            makeFadeout();
        },
        makeCloseable: makeCloseable,
        makeFadeout: makeFadeout,
        template: MESSAGE_TEMPLATE,
        createMessage: createMessageConstructor
    };

    function initCloseMessageBoxOnClickAndKeypress($message) {
        $message.on('click', '.aui-icon.icon-close', function (e) {
            (0, _$['default'])(e.target).closest('.aui-message').closeMessage();
        }).on('keydown', '.aui-icon.icon-close', function (e) {
            if (e.which === _keyCode2['default'].ENTER || e.which === _keyCode2['default'].SPACE) {
                (0, _$['default'])(e.target).closest('.aui-message').closeMessage();
                e.preventDefault(); // this is especially important when handling the space bar, as we don't want to page down
            }
        });
    }

    function insertMessageIntoContext($message, insertWhere, context) {
        if (insertWhere === 'prepend') {
            $message.prependTo(context);
        } else {
            $message.appendTo(context);
        }
    }

    function renderMessageElement(templateString, options, type) {
        // Append the message using template
        var $message = (0, _$['default'])((0, _template2['default'])(templateString).fill({
            type: type,
            closeable: options.closeable ? 'closeable' : '',
            shadowed: options.shadowed ? 'shadowed' : '',
            fadeout: options.fadeout ? 'fadeout' : '',
            title: options.title || '',
            'body:html': options.body || ''
        }).toString());

        // Add ID if supplied
        if (options.id) {
            if (/[#\'\"\.\s]/g.test(options.id)) {
                // reject IDs that don't comply with style guide (ie. they'll break stuff)
                _internalLog.warn('Messages error: ID rejected, must not include spaces, hashes, dots or quotes.');
            } else {
                $message.attr('id', options.id);
            }
        }

        return $message;
    }

    _$['default'].fn.closeMessage = function () {
        var $message = (0, _$['default'])(this);
        if ($message.hasClass('aui-message') && $message.hasClass('closeable')) {
            $message.stop(true); //Stop any running animation
            $message.trigger('messageClose', [this]).remove(); //messageClose event Deprecated as of 5.3
            (0, _$['default'])(document).trigger('aui-message-close', [this]); //must trigger on document since the element has been removed
        }
    };

    createMessageConstructor('generic');
    createMessageConstructor('error');
    createMessageConstructor('warning');
    createMessageConstructor('info');
    createMessageConstructor('success');
    createMessageConstructor('hint');

    (0, _skate['default'])('aui-message', {
        created: function created(element) {
            var body = element.innerHTML;
            var type = element.getAttribute('type') || 'info';

            element.innerHTML = '';
            messages[type](element, {
                body: body,
                closeable: element.getAttribute('closeable'),
                delay: element.getAttribute('delay'),
                duration: element.getAttribute('duration'),
                fadeout: element.getAttribute('fadeout'),
                title: element.getAttribute('title')
            });
        }
    });

    (0, _$['default'])(function () {
        messages.setup();
    });

    _internalDeprecation.prop(messages, 'makeCloseable', {
        extraInfo: 'Use the "closeable" option in the constructor instead. Docs: https://docs.atlassian.com/aui/latest/docs/messages.html'
    });

    _internalDeprecation.prop(messages, 'createMessage', {
        extraInfo: 'Use the provided convenience methods instead e.g. messages.generic(). Docs: https://docs.atlassian.com/aui/latest/docs/messages.html'
    });

    _internalDeprecation.prop(messages, 'makeFadeout', {
        extraInfo: 'Use the "fadeout" option in the constructor instead. Docs: https://docs.atlassian.com/aui/latest/docs/messages.html'
    });

    // Exporting
    // ---------

    (0, _globalize['default'])('messages', messages);

    module.exports = messages;
});
//# sourceMappingURL=../../js/aui/messages.js.map