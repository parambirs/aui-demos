{"version":3,"sources":["js/aui/filter-by-search.js"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,gBAAY,CAAC;;;;;;;;;;;;;;;;;;;;;AAoBb,aAAS,cAAc,CAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE;;AAE/C,YAAI,CAAC,MAAM,EAAE;AACT,mBAAO,EAAE,CAAC;SACb;;AAED,YAAI,aAAa,GAAG,AAAC,OAAO,IAAI,OAAO,CAAC,aAAa,IAAK,UAAU,CAAC;AACrE,YAAI,cAAc,GAAG,AAAC,OAAO,IAAI,OAAO,CAAC,kBAAkB,GAAI,GAAG,GAAG,EAAE,CAAC;AACxE,YAAI,YAAY,GAAI,AAAC,OAAO,IAAI,OAAO,CAAC,aAAa,GAAI,KAAK,GAAG,EAAE,CAAC;AACpE,YAAI,UAAU,GAAG,AAAC,OAAO,IAAI,OAAO,CAAC,UAAU,IAAM,KAAK,AAAC,CAAC;;;AAG5D,YAAI,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAC3C,YAAI,OAAO,GAAG,EAAE,CAAC;;AAEjB,mBAAW,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;;AAEhC,gBAAI,UAAU,GAAG,CAAC,IAAI,MAAM,CAAC,YAAY,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;;;AAGxD,gBAAI,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AACnC,oBAAI,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;;AAEjE,0BAAU,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC,CAAC;aAC9D;;AAED,mBAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC5B,CAAC,CAAC;;AAEH,YAAI,MAAM,GAAG,EAAE,CAAC;;AAEhB,eAAO,CAAC,OAAO,CAAC,UAAU,KAAK,EAAE;AAC7B,iBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,oBAAI,gBAAgB,GAAG,KAAK,CAAC;;AAE7B,qBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxC,wBAAI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE;AAC1C,wCAAgB,GAAG,IAAI,CAAC;AACxB,8BAAM;qBACT;iBACJ;;AAED,oBAAI,CAAC,gBAAgB,EAAE;AACnB,2BAAO;iBACV;aACJ;;AAED,kBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACtB,CAAC,CAAC;;AAEH,eAAO,MAAM,CAAC;KACjB;;AAED,QAAI,cAAc,GAAG,yBAvEZ,EAAE,EAuEsB,cAAc,EAAE,gBAAgB,EAAE;AAC/D,oBAAY,EAAE,OAAO;AACrB,iBAAS,EAAE,4FAA4F;KAC1G,CAAC,CAAC;;AAEH,+BAAU,gBAAgB,EAAE,cAAc,CAAC,CAAC;;qBAE7B,cAAc","file":"js/aui/filter-by-search.js","sourcesContent":["'use strict';\n\nimport { fn as deprecateFn } from './internal/deprecation';\nimport globalize from './internal/globalize';\n\n/**\n * Filters a list of entries by a passed search term.\n *\n * Options:\n * - `keywordsField` name of entry field containing keywords, default \"keywords\".\n * - `ignoreForCamelCase` ignore search case for camel case, e.g. CB matches Code Block *and* Code block.\n * - `matchBoundary` match words only at boundary, e.g. link matches \"linking\" but not \"hyperlinks\".\n * - `splitRegex` regex to split search words, instead of on whitespace.\n *\n * @param {Array} entries An array of objects with a \"keywords\" property.\n * @param {String} search One or more words to search on, which may include camel-casing.\n * @param {Object} options Specifiy to override default behaviour.\n *\n * @returns {Array}\n */\nfunction filterBySearch (entries, search, options) {\n    // search for nothing, get nothing - up to calling code to handle.\n    if (!search) {\n        return [];\n    }\n\n    var keywordsField = (options && options.keywordsField) || 'keywords';\n    var camelCaseFlags = (options && options.ignoreForCamelCase) ? 'i' : '';\n    var boundaryFlag  = (options && options.matchBoundary) ? '\\\\b' : '';\n    var splitRegex = (options && options.splitRegex) || (/\\s+/);\n\n    // each word in the input is considered a distinct filter that has to match a keyword in the record\n    var filterWords = search.split(splitRegex);\n    var filters = [];\n\n    filterWords.forEach(function (word) {\n        // anchor on word boundaries\n        var subfilters = [new RegExp(boundaryFlag + word, 'i')];\n\n        // split camel-case into separate words\n        if (/^([A-Z][a-z]*) {2,}$/.test(this)) {\n            var camelRegexStr = this.replace(/([A-Z][a-z]*)/g, '\\\\b$1[^,]*');\n\n            subfilters.push(new RegExp(camelRegexStr, camelCaseFlags));\n        }\n\n        filters.push(subfilters);\n    });\n\n    var result = [];\n\n    entries.forEach(function (entry) {\n        for (var i = 0; i < filters.length; i++) {\n            var somethingMatches = false;\n\n            for (var j = 0; j < filters[i].length; j++) {\n                if (filters[i][j].test(entry[keywordsField])) {\n                    somethingMatches = true;\n                    break;\n                }\n            }\n\n            if (!somethingMatches) {\n                return;\n            }\n        }\n\n        result.push(entry);\n    });\n\n    return result;\n}\n\nvar filterBySearch = deprecateFn(filterBySearch, 'filterBySearch', {\n    sinceVersion: '5.9.0',\n    extraInfo: 'No alternative will be provided. If products require this function, this should be copied.'\n});\n\nglobalize('filterBySearch', filterBySearch);\n\nexport default filterBySearch;\n"],"sourceRoot":"/source/"}