(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', 'module', './jquery', './internal/deprecation', './internal/log', './internal/globalize'], factory);
    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
        factory(exports, module, require('./jquery'), require('./internal/deprecation'), require('./internal/log'), require('./internal/globalize'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, mod, global.$, global.deprecate, global.logger, global.globalize);
        global.binder = mod.exports;
    }
})(this, function (exports, module, _jquery, _internalDeprecation, _internalLog, _internalGlobalize) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _$ = _interopRequireDefault(_jquery);

    var _globalize = _interopRequireDefault(_internalGlobalize);

    /**
     * Support for markup based binder components. Binder components must be objects with the following "interface":
     *
     * <pre>
     * {
     *   selector: "input.foo",
     *   run: function(element) {
     *      //do stuff on given element
     *   }
     * }
     * </pre>
     */
    var Binder = (function () {
        'use strict';

        var binders = {};

        return {
            /**
             * Runs all the binder components for the given scope, or the document body if none specified.
             *
             * @method runBinders
             * @param scope {Element} element scope to run the binders in
             */
            runBinders: function runBinders(scope) {
                if (_$['default'].isEmptyObject(binders)) {
                    _internalLog.log('No binders to run');
                    return;
                }

                scope = scope || document.body;

                (0, _$['default'])('*:not(link, script)', scope).each(function (i, element) {
                    var $element = (0, _$['default'])(element);
                    _$['default'].each(binders, function (id, binder) {
                        if (!$element.data(id) && $element.is(binder.selector)) {
                            _internalLog.log('Running binder component: ' + id + ' on element ' + element);
                            $element.data(id, true); // so we don't bind to the same element again later
                            binder.run(element);
                        }
                    });
                });
            },

            /**
             * Register a binder component with the given id.
             * @method register
             */
            register: function register(id, binder) {
                binders[id] = binder;
            },

            /**
             * Unregister a binder component for the given id.
             * @method unregister
             */
            unregister: function unregister(id) {
                binders[id] = null;
            }
        };
    })();

    Binder = _internalDeprecation.construct(Binder, 'Binder', {
        sinceVersion: '5.8.0'
    });

    (0, _globalize['default'])('Binder', Binder);

    module.exports = Binder;
});
//# sourceMappingURL=../../js/aui/binder.js.map