(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', 'module', './backbone', './internal/globalize'], factory);
    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
        factory(exports, module, require('./backbone'), require('./internal/globalize'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, mod, global.Backbone, global.globalize);
        global.resultSet = mod.exports;
    }
})(this, function (exports, module, _backbone, _internalGlobalize) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _Backbone = _interopRequireDefault(_backbone);

    var _globalize = _interopRequireDefault(_internalGlobalize);

    var ResultSet = _Backbone['default'].Model.extend({
        initialize: function initialize(options) {
            this.set('active', null, { silent: true });
            this.collection = new _Backbone['default'].Collection();
            this.collection.bind('reset', this.setActive, this);
            this.source = options.source;
            this.source.bind('respond', this.process, this);
        },

        url: false,

        process: function process(response) {
            this.set('query', response.query);
            this.collection.reset(response.results);
            this.set('length', response.results.length);
            this.trigger('update', this);
        },

        setActive: function setActive() {
            var id = arguments[0] instanceof _Backbone['default'].Collection ? false : arguments[0];
            var model = id ? this.collection.get(id) : this.collection.first();
            this.set('active', model || null);
            return this.get('active');
        },

        next: function next() {
            var current = this.collection.indexOf(this.get('active'));
            var i = (current + 1) % this.get('length');
            var next = this.collection.at(i);
            return this.setActive(next && next.id);
        },

        prev: function prev() {
            var current = this.collection.indexOf(this.get('active'));
            var i = (current === 0 ? this.get('length') : current) - 1;
            var prev = this.collection.at(i);
            return this.setActive(prev && prev.id);
        },

        each: function each() {
            return this.collection.each.apply(this.collection, arguments);
        }
    });

    (0, _globalize['default'])('ResultSet', ResultSet);

    module.exports = ResultSet;
});
//# sourceMappingURL=../../js/aui/result-set.js.map