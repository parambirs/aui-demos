(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', 'module', './internal/deprecation', './internal/globalize'], factory);
    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
        factory(exports, module, require('./internal/deprecation'), require('./internal/globalize'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, mod, global.deprecation, global.globalize);
        global.stopEvent = mod.exports;
    }
})(this, function (exports, module, _internalDeprecation, _internalGlobalize) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _globalize = _interopRequireDefault(_internalGlobalize);

    /**
     * Prevent further handling of an event. Returns false, which you should use as the return value of your event handler:
     * return stopEvent(e);
     *
     * @param {jQuery.Event} e jQuery event
     *
     * @returns {Boolean}
     */
    function stopEvent(e) {
        e.stopPropagation();
        return false; // required for JWebUnit pop-up links to work properly
    }

    var stopEvent = (0, _internalDeprecation.fn)(stopEvent, 'stopEvent', {
        alternativeName: 'preventDefault()',
        sinceVersion: '5.8.0'
    });

    (0, _globalize['default'])('stopEvent', stopEvent);

    module.exports = stopEvent;
});
//# sourceMappingURL=../../js/aui/stop-event.js.map