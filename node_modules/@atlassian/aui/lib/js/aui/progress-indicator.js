(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define(['exports', 'module', './jquery', './internal/animation', './internal/globalize'], factory);
    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
        factory(exports, module, require('./jquery'), require('./internal/animation'), require('./internal/globalize'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, mod, global.$, global.animation, global.globalize);
        global.progressIndicator = mod.exports;
    }
})(this, function (exports, module, _jquery, _internalAnimation, _internalGlobalize) {
    'use strict';

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

    var _$ = _interopRequireDefault(_jquery);

    var _globalize = _interopRequireDefault(_internalGlobalize);

    function updateProgress($progressBar, $progressBarContainer, progressValue) {
        (0, _internalAnimation.recomputeStyle)($progressBar);
        $progressBar.css('width', progressValue * 100 + '%');
        $progressBarContainer.attr('data-value', progressValue);
    }

    var progressBars = {
        update: function update(element, value) {
            var $progressBarContainer = (0, _$['default'])(element).first();
            var $progressBar = $progressBarContainer.children('.aui-progress-indicator-value');
            var currentProgress = $progressBar.attr('data-value') || 0;

            var afterTransitionEvent = 'aui-progress-indicator-after-update';
            var beforeTransitionEvent = 'aui-progress-indicator-before-update';
            var transitionEnd = 'transitionend webkitTransitionEnd';

            var isIndeterminate = !$progressBarContainer.attr('data-value');

            //if the progress bar is indeterminate switch it.
            if (isIndeterminate) {
                $progressBar.css('width', 0);
            }

            if (typeof value === 'number' && value <= 1 && value >= 0) {
                $progressBarContainer.trigger(beforeTransitionEvent, [currentProgress, value]);

                //detect whether transitions are supported
                var documentBody = document.body || document.documentElement;
                var style = documentBody.style;
                var transition = 'transition';

                //trigger the event after transition end if supported, otherwise just trigger it
                if (typeof style.transition === 'string' || typeof style.WebkitTransition === 'string') {
                    $progressBar.one(transitionEnd, function () {
                        $progressBarContainer.trigger(afterTransitionEvent, [currentProgress, value]);
                    });
                    updateProgress($progressBar, $progressBarContainer, value);
                } else {
                    updateProgress($progressBar, $progressBarContainer, value);
                    $progressBarContainer.trigger(afterTransitionEvent, [currentProgress, value]);
                }
            }
            return $progressBarContainer;
        },

        setIndeterminate: function setIndeterminate(element) {
            var $progressBarContainer = (0, _$['default'])(element).first();
            var $progressBar = $progressBarContainer.children('.aui-progress-indicator-value');

            $progressBarContainer.removeAttr('data-value');
            (0, _internalAnimation.recomputeStyle)($progressBarContainer);
            $progressBar.css('width', '100%');
        }
    };

    (0, _globalize['default'])('progressBars', progressBars);

    module.exports = progressBars;
});
//# sourceMappingURL=../../js/aui/progress-indicator.js.map